services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect:8083
    depends_on:
      - kafka
      - connect

  connect:
    image: debezium/connect:2.6.0.Final
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      REST_ADVERTISED_HOST_NAME: connect
      PLUGIN_PATH: /kafka/connect
      TOPIC_NAMING_STRATEGY: io.debezium.schema.DefaultTopicNamingStrategy
    volumes:
      - ./drivers/db2jcc4.jar:/kafka/connect/db2jcc4.jar
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 10s
      timeout: 5s
      retries: 10

  # db2:
  #   platform: linux/amd64
  #   image: icr.io/db2_community/db2:11.5.8.0
  #   container_name: db2
  #   privileged: true
  #   environment:
  #     LICENSE: accept
  #     DB2INST1_PASSWORD: password
  #     DBNAME: TESTDB
  #   ports:
  #     - "50000:50000"
  #   healthcheck:
  #     test: ["CMD-SHELL", "su - db2inst1 -c 'db2 connect to testdb' || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 10

  postgres:
    image: debezium/postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_replication_slots=4"
      - "-c"
      - "max_wal_senders=4"
    volumes:
      - ./postgres/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  sqlserver:
    platform: linux/amd64
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "YourStrong!Passw0rd"
      ACCEPT_EULA: "Y"
      MSSQL_AGENT_ENABLED: "true"
    volumes:
      - ./mssql/init-mssql.sql:/docker-entrypoint-initdb.d/init-mssql.sql
    command: >
      /bin/bash -c "
      /opt/mssql/bin/sqlservr &
      pid=$!;
      echo '⏳ Waiting for SQL Server to start...';
      sleep 20;
      echo '🚀 Running init script...';
      /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -i /docker-entrypoint-initdb.d/init-mssql.sql -N -C;
      wait $pid"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1' -N -C"]
      interval: 10s
      timeout: 5s
      retries: 5

  # mongodb:
  #   image: mongo:6.0
  #   container_name: mongodb
  #   hostname: mongodb
  #   ports:
  #     - "27017:27017"
  #   command:
  #     - mongod
  #     - --replSet
  #     - rs0
  #     - --bind_ip
  #     - 0.0.0.0
  #     - --noauth
  #   volumes:
  #     - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: debezium
      MYSQL_PASSWORD: dbz
      MYSQL_DATABASE: inventory
    command: >
      --server-id=223344
      --log-bin=mysql-bin
      --binlog-format=ROW
      --binlog-row-image=FULL
      --gtid-mode=ON
      --enforce-gtid-consistency=ON
      --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./mysql/init-mysql.sql:/docker-entrypoint-initdb.d/init-mysql.sql