services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://connect:8083
    depends_on:
      - kafka
      - connect

  connect:
    image: debezium/connect:2.6.0.Final
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      REST_ADVERTISED_HOST_NAME: connect
      PLUGIN_PATH: /kafka/connect
      TOPIC_NAMING_STRATEGY: io.debezium.schema.DefaultTopicNamingStrategy
    volumes:
      - ./drivers/db2jcc4.jar:/kafka/connect/db2jcc4.jar

  postgres:
    image: debezium/postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventory
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_replication_slots=4"
      - "-c"
      - "max_wal_senders=4"
    volumes:
      - ./postgres/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql

  sqlserver:
    platform: linux/amd64
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: "YourStrong!Passw0rd"
      ACCEPT_EULA: "Y"
      MSSQL_AGENT_ENABLED: "true"
    volumes:
      - ./mssql/init-mssql.sql:/docker-entrypoint-initdb.d/init-mssql.sql
    command: >
      /bin/bash -c "
      /opt/mssql/bin/sqlservr &
      pid=$!;
      echo '‚è≥ Waiting for SQL Server to start...';
      sleep 20;
      echo 'üöÄ Running init script...';
      /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -i /docker-entrypoint-initdb.d/init-mssql.sql -N -C;
      wait $pid"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1' -N -C"]
      interval: 10s
      timeout: 5s
      retries: 5

  db2:
    platform: linux/amd64
    image: icr.io/db2_community/db2:11.5.8.0
    container_name: db2
    privileged: true
    environment:
      LICENSE: accept
      DB2INST1_PASSWORD: password
      DBNAME: TESTDB
    ports:
      - "50000:50000"
    healthcheck:
      test: ["CMD-SHELL", "su - db2inst1 -c 'db2 connect to testdb' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10

  oracle:
    image: gvenzl/oracle-free:23-slim
    container_name: oracle
    ports:
      - "1521:1521"
    environment:
      ORACLE_PASSWORD: oracle
      APP_USER: debezium
      APP_USER_PASSWORD: dbz
    volumes:
      - oracle-data:/opt/oracle/oradata
      - ./oracle/init-oracle.sql:/container-entrypoint/init.sql
    healthcheck:
      test: ["CMD-SHELL", "echo 'SELECT 1 FROM DUAL;' | sqlplus -s debezium/dbz@ORCLCDB || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10

volumes:
  oracle-data: